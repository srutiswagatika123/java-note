Agenda:
1) File
2) FileWriter
3) FileReader
4) BufferedWriter
5) BufferedReader
6) PrintWriter
File:

File f=new File("abc.txt");

• This line 1st checks whether abc.txt file is already available (or) not if it is already
available then “f” simply refers that file. If it is not already available then it won’t create
any physical file just creates a java File object represents name of the file.
Example:
import java.io.*;
class FileDemo
{
public static void main(String[] args)throws IOException
{
File f=new File("cricket.txt");
System.out.println(f.exists());//false
f.createNewFile();
System.out.println(f.exists());//true
}
}
• A java File object can represent a directory also.
Example:
import java.io.*;
class FileDemo
{
public static void main(String[] args)throws IOException
{
File f=new File("cricket123");
System.out.println(f.exists());//false
f.mkdir();
System.out.println(f.exists());//true
}

jitusir 9090519502

316

}
Note: in UNIX everything is a file, java “file IO” is based on UNIX operating system hence in java
also we can represent both files and directories by File object only.
File class constructors:
1) File f=new File(String name);
• Creates a java File object that represents name of the file or directory.
2) File f=new File(String subdirname,String name);
• Creates a File object that represents name of the file or directory present in specified
sub directory.
3) File f=new File(File subdir,String name);
Requirement: Write code to create a file named with demo.txt in current working directory.
Program:
import java.io.*;
class FileDemo
{
public static void main(String[] args)throws IOException
{
File f=new File("demo.txt");
f.createNewFile();
}
}
Requirement: Write code to create a directory named with bhaskar123 in current working
directory and create a file named with abc.txt in that directory.
Program:
import java.io.*;
class FileDemo
{
public static void main(String[] args)throws IOException
{
File f1=new File("bhaskar123");
f1.mkdir();
File f2=new File("bhaskar123","abc.txt");
f2.createNewFile();
}
}
Requirement: Write code to create a file named with demo.txt present in c:\xyz folder.

jitusir 9090519502

317

Program:
import java.io.*;
class FileDemo
{
public static void main(String[] args)throws IOException
{
File f=new File("c:\\bhaskar","demo.txt");
f.createNewFile();
}
}
Import methods of file class:
1) boolean exists();
• Returns true if the physical file or directory available.
2) boolean createNewFile();
• This method 1st checks whether the physical file is already available or not if it is already
available then this method simply returns false. If this file is not already available then it
will create a new file and returns true
3) boolean mkdir();
4) boolean isFile();
• Returns true if the File object represents a physical file.
5) boolean isDirectory();
6) String[] list();
• It returns the names of all files and subdirectories present in the specified directory.
7) long length();
• Returns the no of characters present in the file.
8) boolean delete();
• To delete a file or directory.
FileWriter:
• By using FileWriter we can write character data to the file.
Constructors:
FileWriter fw=new FileWriter(String name);
FileWriter fw=new FileWriter(File f);
• The above 2 constructors meant for overriding.
• Instead of overriding if we want append operation then we should go for the following 2
constructors.
FileWriter fw=new FileWriter(String name,boolean append);
FileWriter fw=new FileWriter(File f,boolean append);

jitusir 9090519502

318

• If the specified physical file is not already available then these constructors will create
that file.
Methods:
1) write(int ch);
• To write a single character to the file.
2) write(char[] ch);
• To write an array of characters to the file.
3) write(String s);
• To write a String to the file.
4) flush();
• To give the guarantee the last character of the data also added to the file.
5) close();
• To close the stream.
Example:
import java.io.*;
class FileWriterDemo
{
public static void main(String[] args)throws IOException
{
FileWriter fw=new FileWriter("cricket.txt",true);
fw.write(98);//adding a single character
fw.write("haskar\nsoftware solutions");
fw.write("\n");
char[] ch={'a','b','c'};
fw.write(ch);
fw.write("\n");
fw.flush();
fw.close();
}
}
Output:
Bhaskar
Software solutions
ABC
FileReader: By using FileReader we can read character data from the file.
Constructors:
FileReader fr=new FileReader(String name);
FileReader fr=new FileReader (File f);

jitusir 9090519502

319

Methods:
1) int read();
• It attempts to read next character from the file and return its Unicode value. If the next
character is not available then we will get -1.
2) int read(char[] ch);
• It attempts to read enough characters from the file into char[] array and returns the no
of characters copied from the file into char[] array.
3) void close();
Approach 1:
import java.io.*;
class FileReaderDemo
{
public static void main(String[] args)throws IOException
{
FileReader fr=new FileReader("cricket.txt");
int i=fr.read();
while(i!=-1)
{
System.out.print((char)i);
i=fr.read();
}
}
}
Output:
Bhaskar
Software solutions
ABC
Approach 2:
import java.io.*;
class FileReaderDemo
{
public static void main(String[] args)throws IOException
{
File f=new File("cricket.txt");
FileReader fr=new FileReader(f);
char[] ch=new char[(int)f.length()];
fr.read(ch);
for(char ch1:ch)

jitusir 9090519502

320

{
System.out.print(ch1);
}
}
}
Output:
VBR
Software solutions.
Usage of FileWriter and FileReader is not recommended because:
1) While writing data by FileWriter compulsory we should insert line separator(\n)
manually which is a bigger headache to the programmer.
2) While reading data by FileReader we have to read character by character which is not
convent to the programmer.
3) To overcome these limitations we should go for BufferedWriter and BufferedReader
concepts.
BufferedWriter:
• By using BufferedWriter object we can write character data to the file.
Constructors:

BufferedWriter bw=new BufferedWriter(writer w);
BufferedWriter bw=new BufferedWriter(writer w,int buffersize);

Note:
• BufferedWriter never communicates directly with the file it should communicates via
some writer object.
Which of the following declarations are valid?
1) BufferedWriter bw=new BufferedWriter(“cricket.txt”); (invalid)
2) BufferedWriter bw=new BufferedWriter (new File(“cricket.txt”)); (invalid)
3) BufferedWriter bw=new BufferedWriter (new FileWriter(“cricket.txt”)); (valid)

Methods:
1) write(int ch);
2) write(char[] ch);
3) write(String s);
4) flush();
5) close();
6) newline();
• Inserting a new line character to the file.

jitusir 9090519502

321

• When compared with FileWriter which of the following capability(facility) is available as
method in BufferedWriter.
1) Writing data to the file.(x)
2) Closing the writer.(x)
3) Flush the writer.(x)
4) Inserting newline character. ( )
Example:
import java.io.*;
class BufferedWriterDemo
{
public static void main(String[] args)throws IOException
{
FileWriter fw=new FileWriter("cricket.txt");
BufferedWriter bw=new BufferedWriter(fw);
bw.write(100);
bw.newLine();
char[] ch={'a','b','c','d'};
bw.write(ch);
bw.newLine();
bw.write("bhaskar");
bw.newLine();
bw.write("software solutions");
bw.flush();
bw.close();
}
}
Output:
d
abcd
bhaskar
software solutions
BufferedReader:
• This is the most enhanced(better) Reader to read character data from the file.
Constructors:

BufferedReader br=new BufferedReader(Reader r);
BufferedReader br=new BufferedReader(Reader r,int buffersize);

jitusir 9090519502

322

Note:
• BufferedReader can not communicate directly with the File it should communicate via
some Reader object. The main advantage of BufferedReader over FileReader is we can
read data line by line instead of character by character.
Methods:
1) int read();
2) int read(char[] ch);
3) String readLine();
• It attempts to read and return next line from the File. if the next line is not available
then this method returns null.
4) void close();
Example:
import java.io.*;
class BufferedReaderDemo
{
public static void main(String[] args)throws IOException
{
FileReader fr=new FileReader("cricket.txt");
BufferedReader br=new BufferedReader(fr);
String line=br.readLine();
while(line!=null)
{
System.out.println(line);
line=br.readLine();
}
br.close();
}
}
Note:
• Whenever we are closing BufferedReader automatically underlying FileReader will be
closed it is not required to close explicitly.

• Even this rule is applicable for BufferedWriter also.
PrintWriter:
• This is the most enhanced Writer to write text data to the file.

jitusir 9090519502

323

• By using FileWriter and BufferedWriter we can write only character data to the File but
by using PrintWriter we can write any type of data to the File.
Constructors:
PrintWriter pw=new PrintWriter(String name);
PrintWriter pw=new PrintWriter(File f);
PrintWriter pw=new PrintWriter(Writer w);
• PrintWriter can communicate either directly to the File or via some Writer object also.
Methods:
write(int ch);
write (char[] ch);
write(String s);
flush();
close();
print(char ch);
print (int i);
print (double d);
print (boolean b);
print (String s);
println(char ch);
println (int i);
println(double d);
println(boolean b);
println(String s);
Example:
import java.io.*;
class PrintWriterDemo
{
public static void main(String[] args)throws IOException
{
FileWriter fw=new FileWriter("cricket.txt");
PrintWriter out=new PrintWriter(fw);
out.write(100);
out.println(100);
out.println(true);
out.println('c');
out.println("bhaskar");
out.flush();

jitusir 9090519502

324

out.close();
}
}
Output:
d100
true
c
bhaskar
What is the difference between write(100) and print(100)?
• In the case of write(100) the corresponding character “d” will be added to the File but in
the case of print(100) “100” value will be added directly to the File.
Note 1:
1) The most enhanced Reader to read character data from the File is BufferedReader.
2) The most enhanced Writer to write character data to the File is PrintWriter.
Note 2:
1) In general we can use Readers and Writers to handle character data. Where as we can
use InputStreams and OutputStreams to handle binary data(like images, audio files,
video files etc).
2) We can use OutputStream to write binary data to the File and we can use InputStream
to read binary data from the File.
Diagram:

jitusir 9090519502

325

Requirement: Write a program to perform File merge(combine) operation.
Diagram:

Program:
import java.io.*;
class FileWriterDemo1
{
public static void main(String[] args)throws IOException
{
PrintWriter pw=new PrintWriter("file3.txt");
BufferedReader br=new BufferedReader(new FileReader("file1.txt"));
String line=br.readLine();
while(line!=null)
{
pw.println(line);
line=br.readLine();
}
br=new BufferedReader(new FileReader("file2.txt")); reuse
line=br.readLine();
while(line!=null)
{
pw.println(line);
line=br.readLine();
}
pw.flush();
br.close();
pw.close();
}
}
Requirement: Write a program to perform file merge operation where merging should be
performed line by line alternatively.

jitusir 9090519502

326

Diagram:

Program:
import java.io.*;
class FileWriterDemo1
{
public static void main(String[] args)throws IOException
{
PrintWriter pw=new PrintWriter("file3.txt");
BufferedReader br1=new BufferedReader(new FileReader("file1.txt"));
BufferedReader br2=new BufferedReader(new FileReader("file2.txt"));
String line1=br1.readLine();
String line2=br2.readLine();
while(line1!=null||line2!=null)
{
if(line1!=null)
{
pw.println(line1);
line1=br1.readLine();
}
if(line2!=null)
{
pw.println(line2);
line2=br2.readLine();
}
}
pw.flush();
br1.close();
br2.close();
pw.close();
}

jitusir 9090519502

327

}
Requirement: Write a program to delete duplicate numbers from the file.
Diagram:

Program:
import java.io.*;
class FileWriterDemo1
{
public static void main(String[] args)throws IOException
{
BufferedReader br1=new BufferedReader(new FileReader("input.txt"));
PrintWriter out=new PrintWriter("output.txt");
String target=br1.readLine();
while(target!=null)
{
boolean available=false;
BufferedReader br2=new BufferedReader(new FileReader("output.txt"));
String line=br2.readLine();
while(line!=null)
{
if(target.equals(line))
{
available=true;
break;
}
line=br2.readLine();
}
if(available==false)
{
out.println(target);
out.flush();
}
target=br1.readLine();

jitusir 9090519502

328

}
}
}
Requirement: write a program to perform file extraction operation.
Diagram:

Program:
import java.io.*;
class FileWriterDemo1
{
public static void main(String[] args)throws IOException
{
BufferedReader br1=new BufferedReader(new FileReader("input.txt"));
PrintWriter pw=new PrintWriter("output.txt");
String line=br1.readLine();
while(line!=null)
{
boolean available=false;
BufferedReader br2=new BufferedReader(new FileReader("delete.txt"));
String target=br2.readLine();
while(target!=null)
{
if(line.equals(target))
{
available=true;
break;
}
target=br2.readLine();
}
if(available==false)
{

jitusir 9090519502

329
pw.println(line);
}
line=br1.readLine();
}
pw.flush();
}
}

jitusir 9090519502

330
SERIALIZATION

1. Introduction.
2. Object graph in serialization.
3. customized serialization.
4. Serialization with respect inheritance.
Serialization: The process of saving (or) writing state of an object to a file is called serialization
but strictly speaking it is the process of converting an object from java supported form to either
network supported form (or) file supported form.
• By using FileOutputStream and ObjectOutputStream classes we can achieve serialization
process.
Diagram:

De-Serialization: The process of reading state of an object from a file is called DeSerialization
but strictly speaking it is the process of converting an object from file supported form (or)
network supported form to java supported form.
• By using FileInputStream and ObjectInputStream classes we can achieve DeSerialization.
Diagram:

Example 1:
import java.io.*;
class Dog implements Serializable
{
int i=10;
int j=20;

jitusir 9090519502

331

}
class SerializableDemo
{
public static void main(String args[])throws Exception{
Dog d1=new Dog();
System.out.println("Serialization started");
FileOutputStream fos=new FileOutputStream("abc.ser");
ObjectOutputStream oos=new ObjectOutputStream(fos);
oos.writeObject(d1);
System.out.println("Serialization ended");
System.out.println("Deserialization started");
FileInputStream fis=new FileInputStream("abc.ser");
ObjectInputStream ois=new ObjectInputStream(fis);
Dog d2=(Dog)ois.readObject();
System.out.println("Deserialization ended");
System.out.println(d2.i+"................"+d2.j);
}
}
Output:
Serialization started
Serialization ended
Deserialization started
Deserialization ended
10................20
Diagram:

Note: We can perform Serialization only for Serilizable objects.
• An object is said to be Serilizable if and only if the corresponding class implements
Serializable interface.

jitusir 9090519502

332

• Serializable interface present in java.io package and does not contain any methods. It is
marker interface. The required ability will be provided automatically by JVM.
• We can add any no. Of objects to the file and we can read all those objects from the file
but in which order we wrote objects in the same order only the objects will come back.
That is order is important.
Example2:
import java.io.*;
class Dog implements Serializable
{
int i=10;
int j=20;
}
class Cat implements Serializable
{
int i=30;
int j=40;
}
class SerializableDemo
{
public static void main(String args[])throws Exception{
Dog d1=new Dog();
Cat c1=new Cat();
System.out.println("Serialization started");
FileOutputStream fos=new FileOutputStream("abc.ser");
ObjectOutputStream oos=new ObjectOutputStream(fos);
oos.writeObject(d1);
oos.writeObject(c1);
System.out.println("Serialization ended");
System.out.println("Deserialization started");
FileInputStream fis=new FileInputStream("abc.ser");
ObjectInputStream ois=new ObjectInputStream(fis);
Dog d2=(Dog)ois.readObject();
Cat c2=(Cat)ois.readObject();
System.out.println("Deserialization ended");
System.out.println(d2.i+"................"+d2.j);
System.out.println(c2.i+"................"+c2.j);
}
}

jitusir 9090519502

333

Output:
Serialization started
Serialization ended
Deserialization started
Deserialization ended
10................20
30................40
Transient keyword:
• While performing serialization if we don’t want to serialize the value of a particular
variable then we should declare that variable with “transient” keyword.
• At the time of serialization JVM ignores the original value of transient variable and save
default value.
• That is transient means “not to serialize”.
Static Vs Transient:
• static variable is not part of object state hence they won’t participate in serialization
because of this declaring a static variable as transient these is no use.
Transient Vs Final:
• final variables will be participated into serialization directly by their values. Hence
declaring a final variable as transient there is no use.
Example 3:
import java.io.*;
class Dog implements Serializable
{
static transient int i=10;
final transient int j=20;
}
class SerializableDemo
{
public static void main(String args[])throws Exception{
Dog d1=new Dog();
FileOutputStream fos=new FileOutputStream("abc.ser");
ObjectOutputStream oos=new ObjectOutputStream(fos);
oos.writeObject(d1);
FileInputStream fis=new FileInputStream("abc.ser");
ObjectInputStream ois=new ObjectInputStream(fis);
Dog d2=(Dog)ois.readObject();
System.out.println(d2.i+"................"+d2.j);
}

jitusir 9090519502

334

}
Output:
10................20
Diagram:

Table:

declaration output

int i=10;
int j=20;

10................20

transient int i=10;
int j=20;

0................20

transient int i=10;
transient static int j=20;

0................20

transient final int i=10;
transient int j=20;

10................0

transient final int i=10;
transient static int j=20;

10................20

Object graph in serialization:
• Whenever we are serializing an object the set of all objects which are reachable from
that object will be serialized automatically. This group of objects is nothing but object
graph in serialization.
• In object graph every object should be Serializable otherwise we will get runtime
exception saying “NotSerializableException”.
Example 4:
import java.io.*;
class Dog implements Serializable
{
Cat c=new Cat();
}

jitusir 9090519502

335

class Cat implements Serializable
{
Rat r=new Rat();
}
class Rat implements Serializable
{
int j=20;
}
class SerializableDemo
{
public static void main(String args[])throws Exception{
Dog d1=new Dog();
FileOutputStream fos=new FileOutputStream("abc.ser");
ObjectOutputStream oos=new ObjectOutputStream(fos);
oos.writeObject(d1);
FileInputStream fis=new FileInputStream("abc.ser");
ObjectInputStream ois=new ObjectInputStream(fis);
Dog d2=(Dog)ois.readObject();
System.out.println(d2.c.r.j);
}
}
Output:
20
Diagram:

• In the above example whenever we are serializing Dog object automatically Cat and Rat
objects will be serialized because these are part of object graph of Dog object.

jitusir 9090519502

336

• Among Dog, Cat, Rat if at least one object is not serializable then we will get runtime
exception saying “NotSerializableException”.
Customized serialization:
Example 5:
import java.io.*;
class Account implements Serializable
{
String userName="Bhaskar";
transient String pwd="kajal";
}
class CustomizedSerializeDemo
{
public static void main(String[] args)throws Exception{
Account a1=new Account();
System.out.println(a1.userName+"........."+a1.pwd);
FileOutputStream fos=new FileOutputStream("abc.ser");
ObjectOutputStream oos=new ObjectOutputStream(fos);
oos.writeObject(a1);
FileInputStream fis=new FileInputStream("abc.ser");
ObjectInputStream ois=new ObjectInputStream(fis);
Account a2=(Account)ois.readObject();
System.out.println(a2.userName+"........."+a2.pwd);
}
}
Output:
Bhaskar.........kajal
Bhaskar.........null
Diagram:

jitusir 9090519502

337

• In the above example before serialization Account object can provide proper username
and password. But after Deserialization Account object can provide only username bur
not password. This is due to declaring password as transient. Hence doing default
serialization there may be a chance of loss of information due to transient keyword.
• We can recover this loss of information by using customized serialization.
• We can implements customized serialization by using the following two methods.
1) private void writeObject(OutputStream os) throws Exception.
• This method will be executed automatically by jvm at the time of serialization.
• It is a callback method. Hence at the time of serialization if we want to perform any
extra work we have to define that in this method only.
2) private void readObject(InputStream is)throws Exception.

• This method will be executed automatically by JVM at the time of Deserialization. Hence
at the time of Deserialization if we want to perform any extra activity we have to define
that in this method only.
Example 6: Demo program for customized serialization to recover loss of information which is
happen due to transient keyword.
import java.io.*;
class Account implements Serializable
{
String userName="Bhaskar";
transient String pwd="kajal";
private void writeObject(ObjectOutputStream os)throws Exception
{
os.defaultWriteObject();
String epwd="123"+pwd;
os.writeObject(epwd);
}
private void readObject(ObjectInputStream is)throws Exception{
is.defaultReadObject();
String epwd=(String)is.readObject();
pwd=epwd.substring(3);
}
}
class CustomizedSerializeDemo
{
public static void main(String[] args)throws Exception{
Account a1=new Account();
System.out.println(a1.userName+"........."+a1.pwd);

jitusir 9090519502

338
FileOutputStream fos=new FileOutputStream("abc.ser");
ObjectOutputStream oos=new ObjectOutputStream(fos);
oos.writeObject(a1);
FileInputStream fis=new FileInputStream("abc.ser");
ObjectInputStream ois=new ObjectInputStream(fis);
Account a2=(Account)ois.readObject();
System.out.println(a2.userName+"........."+a2.pwd);
}
}
Output:
Bhaskar.........kajal
Bhaskar.........kajal
Diagram:

• At the time of Account object serialization JVM will check is there any writeObject()
method in Account class or not. If it is not available then JVM is responsible to perform
serialization(default serialization). If Account class contains writeObject() method then
JVM feels very happy and executes that Account class writeObject() method. The same
rule is applicable for readObject() method also.
Serialization with respect to inheritance:
Case 1:
• If parent class implements Serializable then automatically every child class by default
implements Serializable. That is Serializable nature is inheriting from parent to child.
Example 7:
import java.io.*;
class Animal implements Serializable
{
int i=10;
}

jitusir 9090519502

339

class Dog extends Animal
{
int j=20;
}
class SerializableWRTInheritance
{
public static void main(String[] args)throws Exception{
Dog d1=new Dog();
System.out.println(d1.i+"........"+d1.j);
FileOutputStream fos=new FileOutputStream("abc.ser");
ObjectOutputStream oos=new ObjectOutputStream(fos);
oos.writeObject(d1);
FileInputStream fis=new FileInputStream("abc.ser");
ObjectInputStream ois=new ObjectInputStream(fis);
Dog d2=(Dog)ois.readObject();
System.out.println(d2.i+"........"+d2.j);
}
}
Output:
10........20
10........20
• Even though Dog class does not implements Serializable interface explicitly but we can
Serialize Dog object because its parent class animal already implements Serializable
interface.
Case 2:
• Even though parent class does not implements Serializable we can serialize child object
if child class implements Serializable interface.
• At the time of serialization JVM ignores the values of instance variables which are
coming from non Serializable parent JVM saves default values for those variables.
• At the time of Deserialization JVM checks whether any parent class is non Serializable or
not. If any parent class is non Serializable JVM creates a separate object for every non
Serializable parent and shares its instance variables to the current object.
• For this JVM always calls no arg constructor(default constructor) of that non Serializable
parent hence every non Serializable parent should compulsory contain no arg
constructor otherwise we will get runtime exception.
Example 8:
import java.io.*;
class Animal

jitusir 9090519502

340

{
int i=10;
Animal(){
System.out.println("Animal constructor called");
}
}
class Dog extends Animal implements Serializable
{
int j=20;
Dog(){
System.out.println("Dog constructor called");
}
}
class SerializableWRTInheritance
{
public static void main(String[] args)throws Exception{
Dog d1=new Dog();
d1.i=888;
d1.j=999;
FileOutputStream fos=new FileOutputStream("abc.ser");
ObjectOutputStream oos=new ObjectOutputStream(fos);
oos.writeObject(d1);
System.out.println("Deserialization started");
FileInputStream fis=new FileInputStream("abc.ser");
ObjectInputStream ois=new ObjectInputStream(fis);
Dog d2=(Dog)ois.readObject();
System.out.println(d2.i+"........."+d2.j);
}
}
Output:
Animal constructor called
Dog constructor called
Deserialization started
Animal constructor called
10.........999